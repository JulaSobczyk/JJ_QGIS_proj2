# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PierwszaWtyczkaDialog
                                 A QGIS plugin
 Wtyczka liczy pola powierzchni i odleglosci miedzy nimi
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by JuliaSobczykJuliaDzierżanowska
        email                : 01179225@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog, Qgis, QgsGeometry, QgsVectorLayer, QgsField, QgsFields, QgsProject, QgsPointXY, QgsFeature
import numpy as np
from qgis.utils import iface
from qgis.PyQt.QtCore import QVariant

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'WtyczkaPierwsza_dialog_base.ui'))


class PierwszaWtyczkaDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PierwszaWtyczkaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.pushButton_oblicz_dh.clicked.connect(self.calculate_dh)
        self.pushButton_oblicz_pol_pow.clicked.connect(self.calculate_area)
        self.pushButton_tworz_poligon.clicked.connect(self.create_polygon)
        self.pushButton_czysc_konsole.clicked.connect(self.clear_console)
        
        self.comboBox.addItem("m^2", "m²")
        self.comboBox.addItem("ary", "a")
        self.comboBox.addItem("ha", "ha")
        
        
    def calculate_dh(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        obiekty = current_layer.selectedFeatures()
        if obiekty is None:
            iface.messageBar().pushMessage("Różnica wysokosci", 'Nie wybrano aktywnej warstwy', level = Qgis.Warning)
            return
        
        obiekt2 = current_layer.selectedFeatures()
        if len(obiekt2) != 2:
            iface.messageBar().pushMessage("Różnica wysokosci", 'Aby policzyć wysokosc wybierz tylko DWA PUNKTY', level = Qgis.Warning)
            return
        
        if len(obiekt2) == 2:
            h_1 = float(obiekt2[0]['wysokosc'])
            h_2 = float(obiekt2[1]['wysokosc'])
            dh = h_2 - h_1 
            self.label_wynik_przewyz.setText(f'{dh} m')
        iface.messageBar().pushMessage("Różnica wysokosci", 'Różnica wysokości między wybranymi punktami została policzona', level = Qgis.Success)
        
        
    def calculate_area(self):
        current_layer = self.mMapLayerComboBox.currentLayer()
        obiekty = current_layer.selectedFeatures()
        punkty = []
        for o in obiekty:
            x = float(o.geometry().asPoint().x())
            y = float(o.geometry().asPoint().y())
            p = QgsPointXY(x, y)
            punkty.append(p)  
        if len(obiekty)<3:
            iface.messageBar().pushMessage("Pole powierzchni", 'Aby policzyć pole powierzchni wybierz co najmniej TRZY PUNKTY', level = Qgis.Warning)
            return
            
        if len(obiekty)>2:
            pole = 0
            dl = len(punkty)
            for e in range(dl):
                a = (e + 1) % dl
                pole += (punkty[a].x() + punkty[e].x()) * (punkty[a].y() - punkty[e].y())
            pole /= 2
            pole = round(abs(pole/10000), 3)
            pole = self.label_wynik_pol_pow.setText(str(pole) +'ha')
            iface.messageBar().pushMessage("Pole powierzchni", 'Pole powierzchni zostało policzone', level = Qgis.Success)
            
    def create_polygon(self):
            current_layer = self.mMapLayerComboBox.currentLayer()
            selected_features = current_layer.selectedFeatures()
            
            if not selected_features:
                iface.messageBar().pushMessage('Warning', 'Nie wybrano punktów', level=Qgis.Warning)
                return
            points = [feature.geometry().asPoint() for feature in selected_features]
            if len(points) < 3:
                iface.messageBar().pushMessage('Error', 'Należy wybrać co najmniej TRZY punkty, aby utworzyć poligon', level=Qgis.Warning)
                return
            
            polygon = QgsGeometry.fromPolygonXY([points])
            new_layer = QgsVectorLayer(f'Polygon?crs={current_layer.crs().authid()}', 'Stworzony poligon', 'memory')
            provider = new_layer.dataProvider()
            
            provider.addAttributes([QgsField('Area', QVariant.Double)])
            new_layer.updateFields()
            
            feature = QgsFeature()
            feature.setGeometry(polygon)
            feature.setAttributes([polygon.area()])
            provider.addFeature(feature)
            new_layer.updateExtents()
            QgsProject.instance().addMapLayer(new_layer)
            area = polygon.area()
            
            
            area_unit = self.comboBox.currentData()
            if area_unit is None:
                iface.messageBar().pushMessage('Error', 'Brak wybranej jednostki w ComboBox.', level=Qgis.Critical)
                return
            if area_unit == 'a':
                area /= 100  # Konwersja na ary
            elif area_unit == 'ha':
                area /= 10000  # Konwersja na hektary
            
            self.label_wynik_pol_polig.setText(f'{area}')
            # Pokaż komunikat z informacją o utworzonym poligonie i jego polu
            iface.messageBar().pushMessage("Tworzenie poligonu", f'Utworzono nową warstwę zawierającą poligon z zaznaczonych punktów. Pole powierzchni: {area} {area_unit}', level=Qgis.Success)
    
    
    def clear_console(self):
        self.label_wynik_pol_polig.setText('')
        self.label_wynik_przewyz.setText('')
        self.label_wynik_pol_pow.setText('')
        
        layer = self.mMapLayerComboBox.currentLayer()
        if layer is not None and isinstance(layer, QgsVectorLayer):
            layer.removeSelection()
        

        
    
    
    
